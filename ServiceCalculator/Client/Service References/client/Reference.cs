//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.client {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="client.ICalculatorService")]
    public interface ICalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Add", ReplyAction="http://tempuri.org/ICalculatorService/AddResponse")]
        Entities.Complex Add(Entities.Complex a, Entities.Complex b);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICalculatorService/Add", ReplyAction="http://tempuri.org/ICalculatorService/AddResponse")]
        System.IAsyncResult BeginAdd(Entities.Complex a, Entities.Complex b, System.AsyncCallback callback, object asyncState);
        
        Entities.Complex EndAdd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Substract", ReplyAction="http://tempuri.org/ICalculatorService/SubstractResponse")]
        Entities.Complex Substract(Entities.Complex first, Entities.Complex second);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICalculatorService/Substract", ReplyAction="http://tempuri.org/ICalculatorService/SubstractResponse")]
        System.IAsyncResult BeginSubstract(Entities.Complex first, Entities.Complex second, System.AsyncCallback callback, object asyncState);
        
        Entities.Complex EndSubstract(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Multiply", ReplyAction="http://tempuri.org/ICalculatorService/MultiplyResponse")]
        Entities.Complex Multiply(Entities.Complex first, Entities.Complex second);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICalculatorService/Multiply", ReplyAction="http://tempuri.org/ICalculatorService/MultiplyResponse")]
        System.IAsyncResult BeginMultiply(Entities.Complex first, Entities.Complex second, System.AsyncCallback callback, object asyncState);
        
        Entities.Complex EndMultiply(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/ThrowError", ReplyAction="http://tempuri.org/ICalculatorService/ThrowErrorResponse")]
        void ThrowError();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICalculatorService/ThrowError", ReplyAction="http://tempuri.org/ICalculatorService/ThrowErrorResponse")]
        System.IAsyncResult BeginThrowError(System.AsyncCallback callback, object asyncState);
        
        void EndThrowError(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/TestingAsyncCall", ReplyAction="http://tempuri.org/ICalculatorService/TestingAsyncCallResponse")]
        string TestingAsyncCall(string id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICalculatorService/TestingAsyncCall", ReplyAction="http://tempuri.org/ICalculatorService/TestingAsyncCallResponse")]
        System.IAsyncResult BeginTestingAsyncCall(string id, System.AsyncCallback callback, object asyncState);
        
        string EndTestingAsyncCall(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorServiceChannel : Client.client.ICalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Entities.Complex Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Entities.Complex)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubstractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubstractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Entities.Complex Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Entities.Complex)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MultiplyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MultiplyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Entities.Complex Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Entities.Complex)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestingAsyncCallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestingAsyncCallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorServiceClient : System.ServiceModel.ClientBase<Client.client.ICalculatorService>, Client.client.ICalculatorService {
        
        private BeginOperationDelegate onBeginAddDelegate;
        
        private EndOperationDelegate onEndAddDelegate;
        
        private System.Threading.SendOrPostCallback onAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubstractDelegate;
        
        private EndOperationDelegate onEndSubstractDelegate;
        
        private System.Threading.SendOrPostCallback onSubstractCompletedDelegate;
        
        private BeginOperationDelegate onBeginMultiplyDelegate;
        
        private EndOperationDelegate onEndMultiplyDelegate;
        
        private System.Threading.SendOrPostCallback onMultiplyCompletedDelegate;
        
        private BeginOperationDelegate onBeginThrowErrorDelegate;
        
        private EndOperationDelegate onEndThrowErrorDelegate;
        
        private System.Threading.SendOrPostCallback onThrowErrorCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestingAsyncCallDelegate;
        
        private EndOperationDelegate onEndTestingAsyncCallDelegate;
        
        private System.Threading.SendOrPostCallback onTestingAsyncCallCompletedDelegate;
        
        public CalculatorServiceClient() {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<AddCompletedEventArgs> AddCompleted;
        
        public event System.EventHandler<SubstractCompletedEventArgs> SubstractCompleted;
        
        public event System.EventHandler<MultiplyCompletedEventArgs> MultiplyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ThrowErrorCompleted;
        
        public event System.EventHandler<TestingAsyncCallCompletedEventArgs> TestingAsyncCallCompleted;
        
        public Entities.Complex Add(Entities.Complex a, Entities.Complex b) {
            return base.Channel.Add(a, b);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAdd(Entities.Complex a, Entities.Complex b, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdd(a, b, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Entities.Complex EndAdd(System.IAsyncResult result) {
            return base.Channel.EndAdd(result);
        }
        
        private System.IAsyncResult OnBeginAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Entities.Complex a = ((Entities.Complex)(inValues[0]));
            Entities.Complex b = ((Entities.Complex)(inValues[1]));
            return this.BeginAdd(a, b, callback, asyncState);
        }
        
        private object[] OnEndAdd(System.IAsyncResult result) {
            Entities.Complex retVal = this.EndAdd(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddCompleted(object state) {
            if ((this.AddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCompleted(this, new AddCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAsync(Entities.Complex a, Entities.Complex b) {
            this.AddAsync(a, b, null);
        }
        
        public void AddAsync(Entities.Complex a, Entities.Complex b, object userState) {
            if ((this.onBeginAddDelegate == null)) {
                this.onBeginAddDelegate = new BeginOperationDelegate(this.OnBeginAdd);
            }
            if ((this.onEndAddDelegate == null)) {
                this.onEndAddDelegate = new EndOperationDelegate(this.OnEndAdd);
            }
            if ((this.onAddCompletedDelegate == null)) {
                this.onAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCompleted);
            }
            base.InvokeAsync(this.onBeginAddDelegate, new object[] {
                        a,
                        b}, this.onEndAddDelegate, this.onAddCompletedDelegate, userState);
        }
        
        public Entities.Complex Substract(Entities.Complex first, Entities.Complex second) {
            return base.Channel.Substract(first, second);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubstract(Entities.Complex first, Entities.Complex second, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubstract(first, second, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Entities.Complex EndSubstract(System.IAsyncResult result) {
            return base.Channel.EndSubstract(result);
        }
        
        private System.IAsyncResult OnBeginSubstract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Entities.Complex first = ((Entities.Complex)(inValues[0]));
            Entities.Complex second = ((Entities.Complex)(inValues[1]));
            return this.BeginSubstract(first, second, callback, asyncState);
        }
        
        private object[] OnEndSubstract(System.IAsyncResult result) {
            Entities.Complex retVal = this.EndSubstract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubstractCompleted(object state) {
            if ((this.SubstractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubstractCompleted(this, new SubstractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubstractAsync(Entities.Complex first, Entities.Complex second) {
            this.SubstractAsync(first, second, null);
        }
        
        public void SubstractAsync(Entities.Complex first, Entities.Complex second, object userState) {
            if ((this.onBeginSubstractDelegate == null)) {
                this.onBeginSubstractDelegate = new BeginOperationDelegate(this.OnBeginSubstract);
            }
            if ((this.onEndSubstractDelegate == null)) {
                this.onEndSubstractDelegate = new EndOperationDelegate(this.OnEndSubstract);
            }
            if ((this.onSubstractCompletedDelegate == null)) {
                this.onSubstractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubstractCompleted);
            }
            base.InvokeAsync(this.onBeginSubstractDelegate, new object[] {
                        first,
                        second}, this.onEndSubstractDelegate, this.onSubstractCompletedDelegate, userState);
        }
        
        public Entities.Complex Multiply(Entities.Complex first, Entities.Complex second) {
            return base.Channel.Multiply(first, second);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginMultiply(Entities.Complex first, Entities.Complex second, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMultiply(first, second, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Entities.Complex EndMultiply(System.IAsyncResult result) {
            return base.Channel.EndMultiply(result);
        }
        
        private System.IAsyncResult OnBeginMultiply(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Entities.Complex first = ((Entities.Complex)(inValues[0]));
            Entities.Complex second = ((Entities.Complex)(inValues[1]));
            return this.BeginMultiply(first, second, callback, asyncState);
        }
        
        private object[] OnEndMultiply(System.IAsyncResult result) {
            Entities.Complex retVal = this.EndMultiply(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMultiplyCompleted(object state) {
            if ((this.MultiplyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MultiplyCompleted(this, new MultiplyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MultiplyAsync(Entities.Complex first, Entities.Complex second) {
            this.MultiplyAsync(first, second, null);
        }
        
        public void MultiplyAsync(Entities.Complex first, Entities.Complex second, object userState) {
            if ((this.onBeginMultiplyDelegate == null)) {
                this.onBeginMultiplyDelegate = new BeginOperationDelegate(this.OnBeginMultiply);
            }
            if ((this.onEndMultiplyDelegate == null)) {
                this.onEndMultiplyDelegate = new EndOperationDelegate(this.OnEndMultiply);
            }
            if ((this.onMultiplyCompletedDelegate == null)) {
                this.onMultiplyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMultiplyCompleted);
            }
            base.InvokeAsync(this.onBeginMultiplyDelegate, new object[] {
                        first,
                        second}, this.onEndMultiplyDelegate, this.onMultiplyCompletedDelegate, userState);
        }
        
        public void ThrowError() {
            base.Channel.ThrowError();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginThrowError(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginThrowError(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndThrowError(System.IAsyncResult result) {
            base.Channel.EndThrowError(result);
        }
        
        private System.IAsyncResult OnBeginThrowError(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginThrowError(callback, asyncState);
        }
        
        private object[] OnEndThrowError(System.IAsyncResult result) {
            this.EndThrowError(result);
            return null;
        }
        
        private void OnThrowErrorCompleted(object state) {
            if ((this.ThrowErrorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ThrowErrorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ThrowErrorAsync() {
            this.ThrowErrorAsync(null);
        }
        
        public void ThrowErrorAsync(object userState) {
            if ((this.onBeginThrowErrorDelegate == null)) {
                this.onBeginThrowErrorDelegate = new BeginOperationDelegate(this.OnBeginThrowError);
            }
            if ((this.onEndThrowErrorDelegate == null)) {
                this.onEndThrowErrorDelegate = new EndOperationDelegate(this.OnEndThrowError);
            }
            if ((this.onThrowErrorCompletedDelegate == null)) {
                this.onThrowErrorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnThrowErrorCompleted);
            }
            base.InvokeAsync(this.onBeginThrowErrorDelegate, null, this.onEndThrowErrorDelegate, this.onThrowErrorCompletedDelegate, userState);
        }
        
        public string TestingAsyncCall(string id) {
            return base.Channel.TestingAsyncCall(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestingAsyncCall(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestingAsyncCall(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndTestingAsyncCall(System.IAsyncResult result) {
            return base.Channel.EndTestingAsyncCall(result);
        }
        
        private System.IAsyncResult OnBeginTestingAsyncCall(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return this.BeginTestingAsyncCall(id, callback, asyncState);
        }
        
        private object[] OnEndTestingAsyncCall(System.IAsyncResult result) {
            string retVal = this.EndTestingAsyncCall(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestingAsyncCallCompleted(object state) {
            if ((this.TestingAsyncCallCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestingAsyncCallCompleted(this, new TestingAsyncCallCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestingAsyncCallAsync(string id) {
            this.TestingAsyncCallAsync(id, null);
        }
        
        public void TestingAsyncCallAsync(string id, object userState) {
            if ((this.onBeginTestingAsyncCallDelegate == null)) {
                this.onBeginTestingAsyncCallDelegate = new BeginOperationDelegate(this.OnBeginTestingAsyncCall);
            }
            if ((this.onEndTestingAsyncCallDelegate == null)) {
                this.onEndTestingAsyncCallDelegate = new EndOperationDelegate(this.OnEndTestingAsyncCall);
            }
            if ((this.onTestingAsyncCallCompletedDelegate == null)) {
                this.onTestingAsyncCallCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestingAsyncCallCompleted);
            }
            base.InvokeAsync(this.onBeginTestingAsyncCallDelegate, new object[] {
                        id}, this.onEndTestingAsyncCallDelegate, this.onTestingAsyncCallCompletedDelegate, userState);
        }
    }
}
